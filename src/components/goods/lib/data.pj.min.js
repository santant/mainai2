//now data对象,是一个占位符号，有就是2018-01-25 没有就有秒
plugindata.prototype.getdate = function(now, s) {
  y = now.getFullYear(),
    m = now.getMonth() + 1,
    d = now.getDate();
  if(s) {
    return y + "-" + (m < 10 ? "0" + m : m) + "-" + (d < 10 ? "0" + d : d);
  } else {
    return y + "-" + (m < 10 ? "0" + m : m) + "-" + (d < 10 ? "0" + d : d) + " " + now.toTimeString().substr(0, 8);
  }
}
//根据//2013-3-10 字符串获取每月1日是星期几,和当前根据当前年月，返回当前月应该多少天
plugindata.prototype.getWeek = function(strweek, numbers) { //strweek  2018-1-2 ,numbers标识符，获取每月从1开始的字符串
  var strweeks = strweek.split('-') //数组
  //获取年份
  var year = strweeks[0];
  //获取月份
  var mouth = strweeks[1];
  //定义当月的天数；
  var days;
  //当月份为二月时，根据闰年还是非闰年判断天数
  if(mouth == 2) {
    days = year % 4 == 0 ? 29 : 28;
  } else if(mouth == 1 || mouth == 3 || mouth == 5 || mouth == 7 || mouth == 8 || mouth == 10 || mouth == 12) {////月份为：1,3,5,7,8,10,12 时，为大月.则天数为31
    days = 31;
  } else {//其他月份，天数为：30.
    days = 30;
  }
  if(numbers) {
    strweeks[2] = "01"
    return {
      week:new Date(strweeks.join('-')).getDay(),//返回星期几
      days :days //返回多少天
    }
  }
  return new Date(strweek).getDay() //反正不是1月的星期几
}
//默认初始化参数
plugindata.prototype.options = function(){
  var dataJson = {
    year : new Date().getFullYear(), //年
    mouth :  new Date().getMonth()+1 < 10 ? +'0'+new Date().getMonth()+1 : new Date().getMonth()+1, //月
    day : new Date().getDate(), //日
    dataM: new Date(), //当前的时间对象
    daymm: 24 * 60 * 60 * 1000, //每天有多少毫秒
    lastDayNumber : 0 , //距离顺延时间的毫秒
    toDay: 30,//往后顺延多少天
    everyDay :0,//默认为0，不参与计算,1=每天送,2工作日送,3=周末送
    lastTime : ''
  }
  return dataJson
}
//根据  {week: 1, days: 31} 对象来随机生成日历
plugindata.prototype.setDataDom = function(week){
  var data = parseInt(week.days)+parseInt(week.week)
  //填写日历
  var str = ''
  for (var i = 0; i < data; i++) {
    str += "<li class='week'>"+(i+1-week.week)+"</li>"
  }
  document.querySelector(".data_assembly .data_number").innerHTML = ''
  document.querySelector(".data_assembly .data_number").innerHTML = str
  var oLi = document.querySelectorAll(".data_assembly > ol > li")
  for (var i = 0; i < week.week; i++) {
    oLi[i].classList.remove('week')
    oLi[i].style.visibility = 'hidden'
  }
}
//操作年月的dom节点代码
plugindata.prototype.domYm = function(dataJson){
  document.querySelector(".data_assembly .year").innerHTML = dataJson.year
  document.querySelector(".data_assembly .mouth").innerHTML = dataJson.mouth
}
//默认执行函数
plugindata.prototype._init_ = function(dataJson){
  //初始化 dom
  this.domYm(dataJson)
  //获取当前时间搓
  var timestamp = dataJson.dataM.getTime()
  //获取时间字符串
  var strdata = this.getdate(dataJson.dataM, 1) //2018-3-10
  var week = this.getWeek(strdata, 1) //根据年月每月1号获取当前1日是星期几,和当前月多少天
  this.setDataDom(week) //渲染dom的初次操作
}
//根据天数算出当前后面的时间增加色值赛选出工作日和周末
plugindata.prototype.toDayTime = function(dataJson){
  console.log(dataJson)
  if(dataJson.everyDay ==0){
    alert('请选择配送类型!')
    return false;
  }
  var _this = this
  var day = _this.getdate(new Date(),1).split('-')[2] //当天日期对应的天数
  //当前时间毫秒
  var od1 =  new Date(_this.getdate(new Date(),1)).getTime()
  //距离后期希望顺延预约的天数毫秒
  var od2 = dataJson.daymm*dataJson.toDay+od1
  var newTime = new Date(od2);
  dataJson.lastTime = _this.getdate(newTime,1)
  dataJson.lastDayNumber = od2
  _this.signTime(dataJson)

}
//根据最终毫秒倍数计算出标记的时间内
function toDou(num){
  return num>=10?''+num:'0'+parseInt(num);
}
plugindata.prototype.signTime = function(dataJson){
  var _this = this;
  var day = this.getdate(new Date(),1) //当天日期对应的天数
  var week = this.getWeek( dataJson.year+'-'+dataJson.mouth+'-01', 1)
  var arrDay = []
  //根据年月生成一个数组
  for (var i = 1; i <= week.days; i++) {
    var currentNum =toDou(i);
    var o = dataJson.year+'-'+toDou(dataJson.mouth)+'-'+currentNum
    var obj = {}
    obj.time = o  //日历时间
    obj.week = _this.getWeek(o) ==0?7:_this.getWeek(o) //星期几
    arrDay.push(obj)
  }
  var weekDom = document.querySelectorAll(".data_assembly > ol .week");
  for (var i = 0; i < arrDay.length; i++) {
    weekDom[i].classList.remove('red')
    if (new Date(arrDay[i].time).getTime() <= dataJson.lastDayNumber && new Date(arrDay[i].time).getTime() >  new Date().getTime()){
      if(dataJson.everyDay==1){ //每日送
        weekDom[i].classList.add("red")
      }
      if(dataJson.everyDay==2 && arrDay[i].week<6){ //工作日送
        weekDom[i].classList.add("red")
      }
      if(dataJson.everyDay==3 && arrDay[i].week>5){//休息日送
        weekDom[i].classList.add("red")
      }
    }
  }
}
//自定义时间对象类
function plugindata(data) {
  var _this = this
  var dataJson = this.options()
  _this._init_(dataJson);//初始化操作

  //根据选择的上下返回年月份
  var prev = document.querySelector(".data_assembly .prev")
  var next = document.querySelector(".data_assembly .next")
  //每日送
  var daySong = document.querySelector("#daySong")
  //工作日送
  var gzrSong = document.querySelector("#gzrSong")
  //周末送
  var zmSong = document.querySelector("#zmSong")


  $(daySong).on('click',function () {
    dataJson.everyDay = 1
    _this.toDayTime(dataJson)
  })
  $(daySong).on('click',function () {
    dataJson.everyDay = 2
    _this.toDayTime(dataJson)
  })
  $(daySong).on('click',function () {
    dataJson.everyDay = 3
    _this.toDayTime(dataJson)
  })

  //上一月
  $(prev).on('click',function () {
    putYm(-- dataJson.mouth)

  })
  $(next).on('click',function () {
    putYm(-- dataJson.mouth)

  })
  //下一月

  var oSpan = document.querySelectorAll(".span")
  for (var i = 0; i < oSpan.length; i++) {
    oSpan[i].index = i;
    oSpan[i].onclick = function(){
      var day = this.getAttribute("day")
      dataJson.toDay = day
      _this.toDayTime(dataJson)
    }
  }
  function putYm(data){
    if(data <=0){
      --dataJson.year
      dataJson.mouth = 12
      console.log(dataJson)
    }
    if(data >12){
      ++dataJson.year
      dataJson.mouth = 1
    }
    _this.domYm(dataJson)
    if (dataJson.mouth < 10){
      dataJson.mouth = '0'+dataJson.mouth
    }
    var strdata = dataJson.year+'-'+dataJson.mouth+'-01'
    var week = _this.getWeek(strdata, 1) //根据年月每月1号获取当前1日是星期几,和当前月多少天
    _this.setDataDom(week) //刷新dom操作
    _this.signTime(dataJson)
  }
}
 // new plugindata()
////创建"对象"
//var p = new plugindata({
//	p: '2'
//});
